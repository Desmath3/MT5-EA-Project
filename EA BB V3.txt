//+------------------------------------------------------------------+
//|                                              BB_ReversalEA.mq5   |
//|                        Copyright 2021, [Your Name]               |
//|                        https://www.mql5.com                      |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>

//------------------ Input Parameters -------------------------------
// Trading settings & filters
input int           Slippage              = 3;           // Slippage in points
input ulong         MagicNumber           = 123456;      // Unique identifier for EA's orders

// Bollinger Bands parameters
input int           BollingerPeriod       = 100;         // Bollinger Bands period
input double        BollingerDeviation    = 2.0;         // Bollinger Bands deviation

// ATR-based risk management parameters
input int           ATRPeriod             = 14;          // ATR period
input double        ATRSLMultiplier       = 2.0;         // Stop loss = ATRSLMultiplier * ATR
input double        RiskRewardRatio       = 10.0;        // Final target = Entry ± (risk * RiskRewardRatio)
input double        RiskPerTrade          = 50.0;        // Fixed risk per trade in USD
input bool          UsePercentageRisk     = false;       // If true, risk is calculated as a percentage of account balance
input double        RiskPercentage        = 1.0;         // Risk percentage (if above is true)

// Reward-based partial close & breakeven parameters (multiples of risk)
input double        PartialCloseReward    = 5.0;         // Partial close level = risk * 5.0
input bool          SetBreakeven          = true;        // Enable setting breakeven after partial close
input double        BreakevenReward       = 1.0;         // Breakeven level = risk * 1.0
input double        PartialClosePercentage= 50.0;        // Percentage of the position to close
input bool          EnableReversalClose   = true;        // Enable reversal close logic
input int           LookbackPeriod        = 14;          // Lookback period for high and low

// Daily bias and trade management
input bool          UseDailyBias          = false;       // If true, only trade in the direction of yesterday's bias
input int           MaxTradesPerDay       = 5;           // Maximum trades allowed per day

// Session toggles
input bool          TradeNewYork          = true;        // Enable New York session
input bool          TradeLondon           = true;        // Enable London session
input bool          TradeTokyo            = true;        // Enable Tokyo session
input bool          TradeSydney           = true;        // Enable Sydney session

//+------------------------------------------------------------------+
//|                      CBBReversalEA Class                         |
//+------------------------------------------------------------------+
class CBBReversalEA
  {
private:
   // Parameters
   int           m_Slippage;
   ulong         m_MagicNumber;
   int           m_BollingerPeriod;
   double        m_BollingerDeviation;
   int           m_ATRPeriod;
   double        m_ATRSLMultiplier;
   double        m_RiskRewardRatio;
   double        m_RiskPerTrade;
   bool          m_UsePercentageRisk;
   double        m_RiskPercentage;
   double        m_PartialCloseReward;
   bool          m_SetBreakeven;
   double        m_BreakevenReward;
   double        m_PartialClosePercentage;
   bool          m_EnableReversalClose;
   int           m_LookbackPeriod;
   bool          m_UseDailyBias;
   int           m_MaxTradesPerDay;
   bool          m_TradeNewYork, m_TradeLondon, m_TradeTokyo, m_TradeSydney;
   // State
   enum BBState { BB_NONE, BB_WAIT_BUY, BB_WAIT_SELL } m_bbState;
   int           m_tradesToday;
   int           m_lastTradeDay;
   datetime      m_lastBarTime;
   ulong         m_partialClosedTickets[];
   // Indicators
   int           m_BandHandle;
   double        m_upperBand[1];
   double        m_lowerBand[1];
   int           m_ATRHandle;
   // Trade
   CTrade        m_trade;
public:
   CBBReversalEA()
     {
      // copy inputs
      m_Slippage              = Slippage;
      m_MagicNumber           = MagicNumber;
      m_BollingerPeriod       = BollingerPeriod;
      m_BollingerDeviation    = BollingerDeviation;
      m_ATRPeriod             = ATRPeriod;
      m_ATRSLMultiplier       = ATRSLMultiplier;
      m_RiskRewardRatio       = RiskRewardRatio;
      m_RiskPerTrade          = RiskPerTrade;
      m_UsePercentageRisk     = UsePercentageRisk;
      m_RiskPercentage        = RiskPercentage;
      m_PartialCloseReward    = PartialCloseReward;
      m_SetBreakeven          = SetBreakeven;
      m_BreakevenReward       = BreakevenReward;
      m_PartialClosePercentage= PartialClosePercentage;
      m_EnableReversalClose   = EnableReversalClose;
      m_LookbackPeriod        = LookbackPeriod;
      m_UseDailyBias          = UseDailyBias;
      m_MaxTradesPerDay       = MaxTradesPerDay;
      m_TradeNewYork          = TradeNewYork;
      m_TradeLondon           = TradeLondon;
      m_TradeTokyo            = TradeTokyo;
      m_TradeSydney           = TradeSydney;
      // init state
      m_bbState    = BB_NONE;
      m_tradesToday= 0;
      m_lastTradeDay = 0;
      m_lastBarTime  = 0;
      ArrayResize(m_partialClosedTickets, 0);
     }

   void InitializeIndicators()
     {
      m_BandHandle = iBands(_Symbol, _Period, m_BollingerPeriod, 0, m_BollingerDeviation, PRICE_CLOSE);
      m_ATRHandle  = iATR(_Symbol, _Period, m_ATRPeriod);
     }

   // New session filter
   bool IsWithinSessionNew()
     {
      datetime currentTime = TimeGMT();
      MqlDateTime dt; TimeToStruct(currentTime, dt);
      int curMin = dt.hour*60 + dt.min;
      bool inSession = false;
      // Tokyo: 00:00–07:00 GMT
      if(m_TradeTokyo && curMin >=   0 && curMin <  7*60) inSession = true;
      // London: 07:00–12:00 GMT
      if(m_TradeLondon&& curMin >=  7*60 && curMin < 12*60) inSession = true;
      // New York:12:00–21:00 GMT
      if(m_TradeNewYork&&curMin >= 12*60 && curMin < 21*60) inSession = true;
      // Sydney:21:00–24:00 GMT
      if(m_TradeSydney&&curMin >= 21*60 && curMin < 24*60) inSession = true;
      return inSession;
     }

   void UpdateBBState()
     {
      double lastClose = iClose(_Symbol,_Period,1);
      CopyBuffer(m_BandHandle,1,0,1,m_upperBand);
      CopyBuffer(m_BandHandle,2,0,1,m_lowerBand);
      if(m_bbState==BB_NONE)
        {
         if(lastClose < m_lowerBand[0]) m_bbState=BB_WAIT_BUY;
         else if(lastClose> m_upperBand[0]) m_bbState=BB_WAIT_SELL;
        }
     }

   ENUM_ORDER_TYPE GetTradeSignalBB()
     {
      ENUM_ORDER_TYPE sig=(ENUM_ORDER_TYPE)-1;
      double lastClose=iClose(_Symbol,_Period,1);
      if(m_bbState==BB_WAIT_BUY && lastClose>m_lowerBand[0])
        { sig=ORDER_TYPE_BUY; m_bbState=BB_NONE; }
      else if(m_bbState==BB_WAIT_SELL && lastClose<m_upperBand[0])
        { sig=ORDER_TYPE_SELL; m_bbState=BB_NONE; }
      return sig;
     }

   int GetDailyBias()
     {
      return(iClose(_Symbol,PERIOD_D1,1) > iOpen(_Symbol,PERIOD_D1,1))?1:-1;
     }

   bool IsAlreadyBought()
     {
      for(int i=PositionsTotal()-1;i>=0;i--)
        {
         ulong ticket=PositionGetTicket(i);
         if(PositionSelectByTicket(ticket)
            && PositionGetString(POSITION_SYMBOL)==_Symbol
            && PositionGetInteger(POSITION_MAGIC)==m_MagicNumber
            && PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY)
            return true;
        }
      return false;
     }
   bool IsAlreadySold()
     {
      for(int i=PositionsTotal()-1;i>=0;i--)
        {
         ulong ticket=PositionGetTicket(i);
         if(PositionSelectByTicket(ticket)
            && PositionGetString(POSITION_SYMBOL)==_Symbol
            && PositionGetInteger(POSITION_MAGIC)==m_MagicNumber
            && PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_SELL)
            return true;
        }
      return false;
     }

   void OpenTrade(ENUM_ORDER_TYPE type)
     {
      double atrArr[1]; CopyBuffer(m_ATRHandle,0,1,1,atrArr);
      double atr=atrArr[0];
      double slDist=atr*m_ATRSLMultiplier, tpDist=slDist*m_RiskRewardRatio;
      double price=(type==ORDER_TYPE_BUY?SymbolInfoDouble(_Symbol,SYMBOL_ASK):SymbolInfoDouble(_Symbol,SYMBOL_BID));
      double sl=(type==ORDER_TYPE_BUY?price-slDist:price+slDist);
      double tp=(type==ORDER_TYPE_BUY?price+tpDist:price-tpDist);
      double riskAmt=m_UsePercentageRisk?AccountInfoDouble(ACCOUNT_BALANCE)*m_RiskPercentage/100.0:m_RiskPerTrade;
      double tickVal=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_VALUE);
      double tickSize=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
      double riskPerLot=(slDist/tickSize)*tickVal;
      double lots=NormalizeDouble(riskAmt/riskPerLot,2);
      MqlTradeRequest req; MqlTradeResult res; ZeroMemory(req); ZeroMemory(res);
      req.action=TRADE_ACTION_DEAL; req.symbol=_Symbol; req.volume=lots;
      req.type=type; req.price=price; req.sl=sl; req.tp=tp;
      req.deviation=m_Slippage; req.magic=m_MagicNumber;
      m_trade.OrderSend(req,res);
     }

   void ManageTrades()
     {
      MqlDateTime tm; TimeToStruct(TimeCurrent(),tm);
      if(tm.day!=m_lastTradeDay){ m_tradesToday=0; m_lastTradeDay=tm.day; }
      if(m_tradesToday>=m_MaxTradesPerDay) return;

      ENUM_ORDER_TYPE sig=GetTradeSignalBB();
      if(sig==(ENUM_ORDER_TYPE)-1) return;
      if(m_UseDailyBias)
        {
         int bias=GetDailyBias();
         if((sig==ORDER_TYPE_BUY && bias!=1)||(sig==ORDER_TYPE_SELL&&bias!=-1)) return;
        }
      if(!IsWithinSessionNew()) return;

      if(sig==ORDER_TYPE_BUY && !IsAlreadyBought())
        { OpenTrade(ORDER_TYPE_BUY); m_tradesToday++; }
      else if(sig==ORDER_TYPE_SELL && !IsAlreadySold())
        { OpenTrade(ORDER_TYPE_SELL); m_tradesToday++; }
     }

   void CheckReversalClose()
     {
      if(!m_EnableReversalClose) return;
      double hh=iHigh(_Symbol,_Period,iHighest(_Symbol,_Period,MODE_HIGH,m_LookbackPeriod,2));
      double ll=iLow(_Symbol,_Period,iLowest(_Symbol,_Period,MODE_LOW,m_LookbackPeriod,2));
      double cur=iClose(_Symbol,_Period,1);
      for(int i=PositionsTotal()-1;i>=0;i--)
        {
         ulong ticket=PositionGetTicket(i);
         if(!PositionSelectByTicket(ticket)) continue;
         if(PositionGetString(POSITION_SYMBOL)!=_Symbol || PositionGetInteger(POSITION_MAGIC)!=m_MagicNumber) continue;
         ENUM_POSITION_TYPE pt=(ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
         if(pt==POSITION_TYPE_SELL && cur>hh) m_trade.PositionClose(ticket);
         if(pt==POSITION_TYPE_BUY  && cur<ll) m_trade.PositionClose(ticket);
        }
     }

   void CheckAndExecutePartialClose()
     {
      for(int i=PositionsTotal()-1;i>=0;i--)
        {
         ulong ticket=PositionGetTicket(i);
         if(!PositionSelectByTicket(ticket)) continue;
         if(PositionGetString(POSITION_SYMBOL)!=_Symbol || PositionGetInteger(POSITION_MAGIC)!=m_MagicNumber) continue;
         bool seen=false;
         for(int j=0;j<ArraySize(m_partialClosedTickets);j++) if(m_partialClosedTickets[j]==ticket) seen=true;
         if(seen) continue;
         double open=PositionGetDouble(POSITION_PRICE_OPEN);
         double sl=PositionGetDouble(POSITION_SL);
         double risk=MathAbs(open-sl);
         double cur=iClose(_Symbol,_Period,0);
         ENUM_POSITION_TYPE pt=(ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
         double target=(pt==POSITION_TYPE_BUY?open+risk*m_PartialCloseReward:open-risk*m_PartialCloseReward);
         if((pt==POSITION_TYPE_BUY && cur>=target)||(pt==POSITION_TYPE_SELL&&cur<=target))
           {
            double vol=NormalizeDouble(PositionGetDouble(POSITION_VOLUME)*(m_PartialClosePercentage/100.0),2);
            if(m_trade.PositionClosePartial(ticket,vol))
              {
               ArrayResize(m_partialClosedTickets,ArraySize(m_partialClosedTickets)+1);
               m_partialClosedTickets[ArraySize(m_partialClosedTickets)-1]=ticket;
               if(m_SetBreakeven)
                 {
                  double be=(pt==POSITION_TYPE_BUY?open+risk*m_BreakevenReward:open-risk*m_BreakevenReward);
                  m_trade.PositionModify(ticket,be,PositionGetDouble(POSITION_TP));
                 }
              }
           }
        }
     }

   void OnTick()
     {
      datetime bt=iTime(_Symbol,_Period,0);
      if(bt!=m_lastBarTime)
        {
         UpdateBBState();
         ManageTrades();
         m_lastBarTime=bt;
        }
      CheckAndExecutePartialClose();
      CheckReversalClose();
     }
  };

//+------------------------------------------------------------------+
//| Global instance                                                  |
//+------------------------------------------------------------------+
CBBReversalEA ea;

//+------------------------------------------------------------------+
//| Expert initialization                                           |
//+------------------------------------------------------------------+
int OnInit()
  {
   ea.InitializeIndicators();
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert tick                                                     |
//+------------------------------------------------------------------+
void OnTick()
  {
   ea.OnTick();
  }
//+------------------------------------------------------------------+
